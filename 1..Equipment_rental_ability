from collection import deque

def find_shortest_path(n,edges,availability, start_pro,target_eup):
  graph = {i:[] for i in range(1,n+1)}
  for u,v in edges:
    graph[u].append(v)
    graph[v].append(u)

  queue = deque([(start_pro,[start])])
  visited = {start_pro}

  while queue:
    current_provider,path=queue.popleft()
    if target in availability.get(current_provider,[]):
      return path

  for neighbor in graph[current_provider]:
    if neighbor not in visited:
      visited.add(neighbor)
      queue.append((neighbor,path+[neighbor]))
  return -1

'''
example:
n=5
edges=[(1,2),(2,3),(3,4),(4,5)]
availability = {1:["excavator"],2:[],3:["bulldozer"],4:["Exacavator"],5:["crane"]}
start_pro = 2
target_eup = 'excavator'
'''
