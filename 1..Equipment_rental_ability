from collections import deque

def find_shortest_path(n,edges,availability, start_pro,target_eup):
  graph = {i:[] for i in range(1,n+1)}
  for u,v in edges:
    graph[u].append(v)
    graph[v].append(u)

  queue = deque([(start_pro,[start_pro])])
  visited = {start_pro}

  while queue:
    current_provider,path=queue.popleft()
    if target_eup in availability.get(current_provider,[]):
      return path

  for neighbor in graph[current_provider]:
    if neighbor not in visited:
      visited.add(neighbor)
      queue.append((neighbor,path+[neighbor]))
  return [-1]

if __name__=="__main__":
  n=int(input("Enter the number of providers:"))
  edge_count = int(input("Enter number of edges:"))
  edges = []

  print("Enter edges (providerA provider B):")
  for _ in range(edge_count):
    edges.append(list(map(int,input().split())))
  availability = {}
  avail_count = int(input("Enter the availabilities:"))
  print("Enter Availabilities (provider equipment1 equipment2...):")
  for _ in range(avail_count):
    line = input().split()
    provider = int(line[0])
    availability[provider] = line[1:]
  start_provider = int(input("Enter start provider:"))
  target_equipment = input("Enter the target equipment:")
  result = find_shortest_path(n,edges,availability,start_provider,target_equipment)
  print(result)
  

